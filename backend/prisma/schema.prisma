// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User and Authentication
model User {
  id                 String    @id @default(cuid())
  name               String
  email              String    @unique
  password           String
  isEmailVerified    Boolean   @default(false)
  verificationToken  String?   
  verificationExpires DateTime?
  resetPasswordToken String?
  resetPasswordExpires DateTime?
  role               UserRole  @default(USER)
  profile            Profile?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  posts              Post[]
  comments           Comment[]
  courses            Course[]    @relation("CourseAuthor")
  enrollments        Enrollment[]
  mediaItems         MediaItem[]
  coursesEnrolled    CourseEnrollment[]
  reviews            CourseReview[]
}

model Profile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
  bio    String?
  avatar String?
}

// Blog Module
model Post {
  id          String    @id @default(cuid())
  title       String
  content     String
  published   Boolean   @default(false)
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  comments    Comment[]
  categories  Category[]
  tags        Tag[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
}

// Community Module
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  posts       Post[]
  courses     Course[]
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  posts Post[]
}

// Course Module
model Course {
  id          String       @id @default(cuid())
  title       String
  description String
  price       Float
  published   Boolean      @default(false)
  authorId    String
  author      User         @relation("CourseAuthor", fields: [authorId], references: [id])
  categories  Category[]
  lessons     Lesson[]
  enrollments Enrollment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  enrollmentsNew CourseEnrollment[]
  reviewsNew   CourseReview[]
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  content     String
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress  Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CourseEnrollment {
  id            String    @id @default(cuid())
  userId        String
  courseId      String
  user          User      @relation(fields: [userId], references: [id])
  course        Course    @relation(fields: [courseId], references: [id])
  
  enrollmentType EnrollmentType
  status        EnrollmentStatus @default(ACTIVE)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@unique([userId, courseId])
}

model CourseReview {
  id            String    @id @default(cuid())
  userId        String
  courseId      String
  user          User      @relation(fields: [userId], references: [id])
  course        Course    @relation(fields: [courseId], references: [id])
  
  rating        Int       @db.SmallInt
  comment       String    @db.Text
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@unique([userId, courseId])
}

// Multimedia Module
model MediaItem {
  id          String     @id @default(cuid())
  title       String
  description String?
  type        MediaType
  url         String
  authorId    String
  author      User       @relation(fields: [authorId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum UserRole {
  USER
  ADMIN
  PROFESSIONAL
  STUDENT
  INSTRUCTOR
}

enum MediaType {
  VIDEO
  AUDIO
  PODCAST
}

enum CourseDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum EnrollmentType {
  FULL
  INSTALLMENT
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}
